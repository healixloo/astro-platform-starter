---
import { Image } from 'astro:assets';
import ContextAlert from '../components/ContextAlert.astro';
import Layout from '../layouts/Layout.astro';
import Markdown from '../components/Markdown.astro';
import corgi from '../assets/corgi.jpg';
import { getNetlifyContext } from '../utils';

const sampleImage = '/images/corgi.jpg';

const ctx = getNetlifyContext();
const forceWebP = ctx === 'dev';
const sampleImageSrcSet = [640, 1280, 2048]
    .map((size) => {
        return `/.netlify/images?url=${sampleImage}&w=${size}${forceWebP ? '&fm=webp' : ''} ${size}w`;
    })
    .join(', ');
const sizes = '(max-width: 1024px) 100vw, 1024px';

const astroImageSnippet = `
## Our vision

At X-Intelligence, our vision is to create a fair and transparent investment environment where every dollar is utilized to its fullest potential. We strive to pave the way for a bright and exciting future by empowering excellent startups to emerge and shine. Through our platform, we aim to transform innovative ideas into reality and make dreams come true for both entrepreneurs and investors.

~~~js
#include <stdio.h>

int main() {
    printf("Hello, World!\n");
    return 0;
}
~~~
`;

const originalVsCdnSnippet = `
## Before vs after: we will make a difference?

By empowering entrepreneurs and engaging investors in meaningful ways, we aim to bring forth a wave of exceptional startups that drive progress and inspire change. Our vision is to make a tangible differenceâ€”creating opportunities, fostering innovation, and realizing dreams. Together, we will make the future brighter, more exciting, and filled with endless possibilities.

~~~js
print("Hello, World!")
~~~
`;

const devModeWarning = `
In local development, optimization is performed locally without automatic format
detection, so format is set to WebP.
`;
---

<Layout title="Image">
    <div class="flex flex-col gap-12 sm:gap-16">
        <section class="space-y-8">
            <ContextAlert
                addedChecksFunction={(ctx) => {
                    return ctx === 'dev' ? devModeWarning : null;
                }}
            />
            <h1 class="mb-10" style={{ fontSize: '30px',  fontWeight: 'normal'}} What do we expect?</h1>
        </section>
        <section>
            <Markdown content={astroImageSnippet} class="mb-8" />
            <figure>
                <Image src={corgi} alt="Corgi" class="border-2 border-white rounded-lg" />
                <figcaption class="mt-2 text-sm italic">
                    Credit: photo by <a href="https://unsplash.com/@alvannee">Alvan Nee</a> on
                    <a href="https://unsplash.com/photos/long-coated-white-and-brown-dog-lvFlpqEvuRM"> Unsplash </a>
                </figcaption>
            </figure>
        </section>
        <section>
            <Markdown content={originalVsCdnSnippet} class="mb-8" />
            <div class="diff aspect-[3/2] rounded-lg border-2 border-white">
                <div class="diff-item-1">
                    <div>
                        <div class="relative">
                            <span class="hidden absolute py-1.5 px-2.5 text-sm rounded-lg bg-neutral-900/70 top-2.5 right-2.5"></span>
                            <img srcset={sampleImageSrcSet} alt="Corgi" />
                        </div>
                    </div>
                </div>
                <div class="diff-item-2">
                    <div>
                        <div class="relative">
                            <span class="hidden absolute py-1.5 px-2.5 text-sm rounded-lg bg-neutral-900/70 top-2.5 left-2.5"></span>
                            <img src={sampleImage} alt="Corgi" />
                        </div>
                    </div>
                </div>
                <div class="diff-resizer"></div>
            </div>
        </section>
    </div>
</Layout>

<script>
    const images = document.querySelectorAll<HTMLImageElement>('.diff img');

    images.forEach((image) => {
        if (image.complete) {
            showImageSize(image);
        } else {
            image.addEventListener('load', () => {
                showImageSize(image);
            });
        }
    });

    function showImageSize(image: HTMLImageElement) {
        const imageEntry = window?.performance?.getEntriesByName(image.currentSrc)?.[0] as PerformanceResourceTiming;
        if (imageEntry && imageEntry.encodedBodySize) {
            const imageOverlay = image.previousElementSibling;
            imageOverlay.classList.remove('hidden');
            imageOverlay.textContent = `Size: ${Math.ceil(imageEntry.encodedBodySize / 1024)}KB`;
        }
    }
</script>
